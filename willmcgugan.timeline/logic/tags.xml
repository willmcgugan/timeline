<?xml version="1.0" encoding="UTF-8"?>
<moya xmlns="http://moyaproject.com"
	xmlns:db="http://moyaproject.com/db"
    xmlns:let="http://moyaproject.com/let"
    xmlns:tl="http://willmcgugan.com/timeline"
    xmlns:soup="http://moyaproject.com/soup">
    <!-- define your tags here -->

    <tag name="get-stream">
    	<doc>Get a stream object from a UUID or slug</doc>
    	<signature>
    		<attribute name="id" type="expression" missing="no">A stream UUID or slug</attribute>
            <attribute name="user" type="expression" missing="no" required="no">A user</attribute>
    	</signature>

    	<if test="id matches /[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/">
            <db:get model="#Stream" let:uuid="id" dst="stream" />
        </if>
        <else>
            <db:get model="#Stream" let:user="user" let:slug="id" dst="stream" />
        </else>
        <throw exception="willmcgugan.timeline.missing.stream" msg="No stream called '${id}'"
            if="not stream"/>
        <return value="stream"/>
    </tag>

    <tag name="get-stream-required">
        <doc>Get a stream object from a UUID or slug</doc>
        <signature>
            <attribute name="id" type="expression" missing="no">A stream UUID or slug</attribute>
            <attribute name="user" type="expression" missing="no" required="no">A user</attribute>
        </signature>

        <tl:get-stream id="id" user="user" dst="stream"/>
        <catch exception="willmcgugan.timeline.missing.stream">
            <not-found/>
        </catch>
        <return value="stream"/>
    </tag>

    <tag name="get-timeline">
        <doc>Get the timeline for logged in user</doc>
        <signature>
            <attribute name="user" type="expression" default=".user">Owner of timeline</attribute>
        </signature>
        <return>
            <db:get-or-create model="#Timeline"
                    let:user="user" let:slug="'default'"/>
        </return>
    </tag>

    <tag name="get-events">
        <doc>Get events from a given source</doc>
        <signature>
            <attribute name="source" type="expression" required="yes">Source of events</attribute>
        </signature>
        <let parse="partition:[source, '-']" source="parse.0" pk="parse.2" />

        <switch on="source">
            <case>stream</case>
            <db:get model="#Stream" let:id="pk" dst="stream"/>
            <throw exception="timeline.get_events.unknown-stream" msg="no such stream" if="not stream"/>
            <db:query model="#Event" dst="events" let:stream="stream" />

            <case>timeline</case>
            <db:get model="#Timeline" let:id="pk" dst="timeline"/>
            <db:query model="#Event" dst="events" filter="#Event.stream.id in timeline.streams"/>

            <case>user</case>
            <db:get model="moya.auth#User" let:id="pk" dst="user"/>
            <db:query model="#Event" dst="events" filter="#Event.stream.user == user" />

            <default-case/>
            <log-warn>Unknown update type in rpc method 'get_updates'!</log-warn>
        </switch>

        <db:query src="events" distinct="yes" dst="events" />
        <return value="events"/>
    </tag>

    <tag name="render-event">
        <doc>Render an event object</doc>
        <signature>
            <attribute name="event" type="expression" missing="no">An #Event object</attribute>
            <attribute name="link_to_stream" type="boolean" default="yes">Link event to stream?</attribute>
            <attribute name="link_title" type="boolean" default="yes">Link event to title?</attribute>
        </signature>
        <return>
            <render-template template="event.html" withscope="yes"/>
        </return>
    </tag>

    <tag name="notify-stream">
        <doc>Send notification of stream update</doc>
        <signature>
            <attribute name="stream" type="expression" required="yes" missing="no"/>
        </signature>

        <tl:notify path="/events/stream-${stream.id}" action="update-stream"/>

        <db:query columns="#Timeline" filter="#Subscription.stream==stream" dst="timelines"/>
        <for src="timelines" dst="timeline" filter="timeline.user">
            <tl:notify path="/events/timeline-${timeline.id}" action="update-stream"/>
        </for>
        <tl:notify path="/events/user-${stream.user.id}" if="stream.user" action="update-stream"/>
    </tag>

    <filter name="addpclass" value="markup">
        <doc>Add a class to paragraphs</doc>
        <signature>
            <argument name="class"/>
        </signature>
        <return>
            <soup:strain src="markup" select="p" let:class="class"/>
        </return>
    </filter>


    <tag name="user-message">
        <doc>Associate a message with the current message</doc>
        <signature>
            <attribute name="type" type="text" default="success" choices="success,warning,danger"/>
        </signature>
        <if test=".user">
            <db:query model="#UserMessage" let:user=".user" action="delete"/>
            <get-tag-text dst="text"/>
            <db:create model="#UserMessage" let:user=".user" let:text="text"/>
        </if>
    </tag>

    <tag name="get-user-message">
        <doc>Get a message for the current user, or None if there isn't one</doc>
        <return if="not .user"/>
        <db:get model="#UserMessage" let:user=".user" dst="user_message"/>
        <db:delete src="user_message" if="user_message"/>
        <return value="user_message or None"/>
    </tag>


    <tag name="render-user-message">
        <tl:get-user-message dst="message"/>
        <tl:message if="message" type="message.type">
            <markdown>${message.text}</markdown>
        </tl:message>
    </tag>

</moya>
