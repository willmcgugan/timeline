<moya xmlns="http://moyaproject.com"
    xmlns:m="http://moayproject.com"
    xmlns:rpc="http://moyaproject.com/jsonrpc"
    xmlns:let="http://moyaproject.com/let"
    xmlns:db="http://moyaproject.com/db"
    xmlns:tl="http://willmcgugan.com/timeline">

    <!-- Here's an example JSONRPC interface to get you started. -->

    <!-- Use an enumeration so you can refer to error codes by a label -->
    <enum libname="enum.jsonrpc.errors">
        <value id="1" name="name_too_long">
            This error occurs when you enter a name of more than 10 characters
        </value>
        <value id="2" name="login_required">
            User must be logged in to do that
        </value>
        <value id="3" name="unknown_stream">
            Not such stream
        </value>
    </enum>

    <!-- This object creates a view that exposes methods via JSON RPC -->
    <rpc:interface libname="jsonrpc.private" errors="#enum.jsonrpc.errors">

        <!-- An example of a simple remote method -->
        <rpc:method name="greet" description="Renders a greeting">
            <doc>This method will greet you, using the name of your choice</doc>
            <rpc:parameter name="who" type="string" default="'World'" required="no">
                This parameter should be the name of the person you wish to greet. If not given, the name will default to "World"
            </rpc:parameter>
            <rpc:error code="name_too_long" if="len:who gt 10" data="errortext='What were you thinking?',foo='bar'">
                'who' should be ten characters or less, not '${who}'
            </rpc:error>
            <return-str>Hello, ${who}!</return-str>
        </rpc:method>

        <rpc:method name="get_updates" group="events" description="Get updates to a stream">
            <rpc:parameter name="events" type="string" required="yes">events source</rpc:parameter>
            <rpc:parameter name="time" type="number" required="yes">update time</rpc:parameter>
            <rpc:parameter name="new" type="bool" required="no" default="yes">true for newer events, false for older</rpc:parameter>
            <rpc:parameter name="filter_types" type="list" required="no" default="[]">List of types to filter</rpc:parameter>

            <tl:get-events source="events" dst="events"/>

            <db:query src="events" dst="events" if="filter_types"
                filter="#Event.type in filter_types" />

            <if test="not time">
                <db:query src="events" dst="events" maxresults="10" orderby="-insert_seconds" distinct="yes"/>
            </if>
            <else>
                <if test="new">
                    <db:query src="events" dst="events" maxresults="10" orderby="-insert_seconds" distinct="yes"
                        filter="#Event.insert_seconds gt time and #Event.insert_seconds != time"/>
                </if>
                <else>
                    <db:query src="events" dst="events" maxresults="10" orderby="-insert_seconds" distinct="yes"
                        filter="#Event.insert_seconds lt time and #Event.insert_seconds != time"/>
                </else>
            </else>
            <let update_time="events.first.added_time.epoch or 0"/>
            <list dst="events_html"/>
            <for src="events" dst="event">
                <tl:render-event event="event" dst="html"/>
                <append src="events_html" value="{'html': html, 'id': event.uuid}"/>
            </for>
            <return-dict let:events="events_html" let:time="update_time"/>
        </rpc:method>

        <rpc:method name="subscribe" group="stream" description="unsubscribe from a stream">
            <rpc:parameter name="stream" type="string">stream to subscribe to</rpc:parameter>
       
            <rpc:error code="login_required" if="not .user"/>
            <tl:get-stream id="stream" dst="stream"/>
            <db:get-or-create model="#Timeline" dst="timeline"
                let:user=".user" let:slug="'default'"/>
            <db:get-or-create model="#Subscription" dst="subscription"
                let:stream="stream" let:timeline="timeline"/>

            <return-dict let:status="'ok'" />
        </rpc:method>

        <rpc:method name="unsubscribe" group="stream" description="unsubscribe from a stream">
            <rpc:parameter name="stream" type="string">stream to subscribe to</rpc:parameter>
            <rpc:error code="login_required" if="not .user"/>
            <tl:get-stream id="stream" dst="stream"/>
            <db:get-or-create model="#Timeline" dst="timeline"
                let:user=".user" let:slug="'default'"/>
            <db:get-or-create model="#Subscription" dst="subscription"
                let:stream="stream" let:timeline="timeline"/>
            <db:delete src="subscription"/>>

            <return-dict let:status="'ok'"/>
        </rpc:method>

        
        <rpc:method name="preview_comment" description="Preview comment">
            <rpc:parameter name="comment" type="string" required="yes">Comment text</rpc:parameter>
            <rpc:parameter name="markup" type="string" required="yes">Markup type</rpc:parameter>
            <return-dict>
                <render-template template="rpc/preview_comment.html" dst="html"
                    let:comment="comment" let:markup="markup"/>
            </return-dict>
            <catch exception="markup.unsupported">
                <rpc:error code="markup_not_supported">markup '${markup}' is not supported</rpc:error>
            </catch>
        </rpc:method>

    </rpc:interface>

</moya>

