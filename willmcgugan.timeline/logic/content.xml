<?xml version="1.0" encoding="UTF-8"?>
<moya xmlns="http://moyaproject.com"
      xmlns:m="http://moyaproject.com"
      xmlns:let="http://moyaproject.com/let"
      xmlns:db="http://moyaproject.com/db"
      xmlns:forms="http://moyaproject.com/forms"
      xmlns:html="http://moyaproject.com/html"
      xmlns:w="http://moyaproject.com/widgets"
      xmlns:comments="http://moyaproject.com/comments"
      xmlns:tl="http://willmcgugan.com/timeline"
      xmlns:tables="http://moyaproject.com/tables"
      xmlns:imglib="http://moyaproject.com/imagelib">

    <content libname="content.base" template="base.html" final="yes">
        <!--
        <include-js path="js/jquery.js" from="moya.twitter.bootstrap"/>
        <include-js path="js/bootstrap.min.js" from="moya.twitter.bootstrap"/>
    -->
        <include-js path="js/jsonrpc.js" from="moya.jsonrpc"/>
        <include-js path="js/timeline.js"/>
        <include-js path="highlight/highlight.pack.js"/>


        <!--
        <include-css path="css/bootstrap.min.css" from="moya.twitter.bootstrap"/>
        <include-css path="css/timeline.css"/>
        <include-css path="highlight/styles/github.css"/>
    -->
    </content>

    <content libname="content.stream.new_event">
    	<section name="body">
            <html:pre if="result">${prettyjson:result}</html:pre>
    		<w:info>
    			<markdown>
This form can be used to create events.

It's designed to be used by automated systems. You should probably use the official API.

Add `?format=json` to the URL to return a JSON response
    			</markdown>
    		</w:info>
    		<render src="form"/>
    		<w:success if="event">
    			Added ${event}
    		</w:success>
    	</section>
    </content>

    <content libname="content.stream.base" extends="#content.base" template="stream_base.html">
    </content>

    <content libname="content.stream" extends="#content.stream.base">
        <title>${stream.title}</title>
        <str dst="stream_title">${stream.title}</str>

        <section name="side" >
            <tl:stream-info stream="stream"/>
        </section>

        <section name="main">

            <tl:render-user-message/>

            <tl:card title="Edit Stream" id="stream-edit" hidden="not edit_form.bound" dismiss="yes" if="edit_form">
                <render src="edit_form"/>
            </tl:card>

            <tl:modal id="img_modal" title="Image Manager" class="modal-wide" if="stream and stream|'can_manage_stream'">
                <imglib:manager collection=".user.account.imgcollection"
                    on_selection="function(uuid){on_image_selection('${stream.uuid}', uuid)}"
                    single="yes" edit="no" select="stream.image ? [stream.image.uuid] : []"/>
            </tl:modal>

            <tl:modal id="code_modal" title="Get the Code">
                <markdown>

Your stream ID is `${stream.uuid}`.

Your stream password is `${stream.password}`.

#### Posting Events

You can post events to your stream with any of the following methods:
                </markdown>
                <w:tab-panel>

                    <w:tab title="Python">
                        <markdown>

You can install the inthing Python module with PIP as follows:

```bash
pip install inthing
```

You can then post events to your stream with the following:

```python
import inthing
stream = inthing.Stream(id="${stream.uuid}",
                        password="${stream.password}")
stream.text_event(title="New Event", text="Hello, *World*!")
```

                        </markdown>
                    </w:tab>

                    <w:tab title="Inthing App">
                        <markdown>
The Inthing Application is installed along with the Python module, and can be installed with PIP:

```bash
pip install inthing
```

Then set the stream credentials as environment variables:

```bash
export INTHING_STREAM=${stream.uuid}
export INTHING_STREAM_PASSWORD="${stream.password}"
```

You can now post an event from the command line:

```
inthing event --title "New Event" --text "Hello, *World*\!"
```
                        </markdown>
                    </w:tab>

                    <w:tab title="CURL">
                        <markdown>
You can post an event with CURL, which is available on most Linux based platforms:

```
curl ${.request.host}${.appurls.user_stream_upload(username=stream.user.username, stream_slug=stream.slug)}?format=json --form password=${stream.password} --form generator=curl --form title="New Event" --form text="Hello, *World*!"
```
                        </markdown>
                    </w:tab>
                    <w:tab title="WGET">
                        <markdown>

You can post an event with WGET, which is available on most Linux based Platforms:

```
wget -O - ${.request.host}${.appurls.user_stream_upload(username=stream.user.username, stream_slug=stream.slug)}?format=json --post-data password=${stream.password}\&amp;generator=wget\&amp;title="New%20Event"\&amp;text=Hello,%20*World*!
```
                        </markdown>
                    </w:tab>

                    <w:tab title="Other">
                        <markdown>
Even if your favorite language isn't listed here, you can add support with any language that can make POST requests (which is virtualy all of them).
                        </markdown>
                    </w:tab>
                </w:tab-panel>

            </tl:modal>

            <tl:stream id="stream" events="events" source="stream-${stream.id}" stream_id="stream.uuid" link_to_stream="no" />

        </section>
    </content>

    <content libname="content.user.subscriptions" extends="#content.stream.base">
        <let-str menu="subscriptions"/>
        <section name="side" merge="prepend">
            <node template="stream/info/subscriptions.html" withscope="yes" />
        </section>
        <section name="main">
            <node template="copy/no_subscriptions.html" withscope="yes" if="not timeline.streams"/>
            <tl:stream events="events" source="timeline-${timeline.id}"/>
        </section>
    </content>

    <content libname="content.user.streams" extends="#content.stream.base">
        <let-str menu="user_streams"/>
        <section name="side" merge="prepend">
            <node template="stream/info/user_streams.html" withscope="yes"/>
        </section>
        <section name="main">
            <tl:render-user-message/>
            <tl:card title="Your Info" id="account-edit" hidden="not edit_form.bound" dismiss="yes" if="edit_form">
                <render src="edit_form"/>
            </tl:card>
            <node template="list_streams.html" let:streams="streams" let:timeline="timeline"/>
            <tl:stream events="events" source="user-${user.id}"/>
        </section>
    </content>

    <content libname="content.tag.stream" extends="#content.stream.base">
        <let-str menu="tag_stream"/>
        <section name="side" merge="append">
            <node template="stream/info/tag.html" withscope="yes"/>
        </section>
        <section name="main">
            <tl:render-user-message/>
            <tl:stream events="events" source="tag-${tag.slug}"/>
        </section>
    </content>

    <content libname="content.event" extends="#content.base" template="view_event.html">
        <let-str menu="event"/>
        <section name="event">
            <node template="event.html" let:event="event" let:link_to_stream="yes"/>
        </section>
        <section name="comments">
            <comments:comments
                markup="markdown"
                namespace="app-${.app.name}"
                topic="event-${event.uuid}"
                url="${.urls.timeline.event(event_id=event.uuid)}"/>
        </section>
    </content>

    <content libname="content.dash" extends="#content.base" template="dash_base.html">
        <let-str menu="dash"/>
        <section name="side">
            <scope-node template="dash/nav.html"/>
        </section>
        <section name="main">
            <html:h3>Dashboard</html:h3>
        </section>
    </content>

    <content libname="content.dash.stream.new" extends="#content.dash">
        <str dst="dash_view">streams</str>
        <section name="main">
            <w:breadcrumbs>
                <w:link name="dash">Dash</w:link>
                <w:link name="dash_streams">Streams</w:link>
                <w:link name="new_stream">New</w:link>
            </w:breadcrumbs>
            <tl:card title="New Stream" close="no">
                <render src="form"/>
            </tl:card>
        </section>
    </content>

    <content libname="content.dash.streams" extends="#content.dash">
        <str dst="dash_view">streams</str>

        <section name="main">

            <w:breadcrumbs>
                <w:link name="dash">Dash</w:link>
                <w:link name="dash_streams">Streams</w:link>
            </w:breadcrumbs>

            <node template="dash/streams_container.html">
                <m:for src="streams" dst="stream">
                    <node template="dash/stream.html" let:stream="stream"/>
                </m:for>
            </node>
        </section>

    </content>

</moya>
